use = require('used')
path_helper = require('path')
app = use('@Konsserto/Component/HttpKernel/Application')
apps = new app(true)

module.exports = {

	processViewPath: function(location,twigext){

		// If loaded by Twig
		if (twigext) {

			//  We replace / and \ by empty if it is a relative (:) path
			if (location.match('([a-z]{2,}):(.+)')) {
				location = location.replace(/\//,'').replace(/\\/,'');
			}
			//  We took only the absolute (::) path
			if (location.indexOf('::')>=0) {
				location = location.substr((location.indexOf('::')),location.length);
			}

		}

		// If it is a Konsserto template path (relative : or absolute ::)
		if (location.match('([a-z]{2,}):(.+)') || location.match('^::')) {

			var resolvedLocation = process.cwd();

			if (location.indexOf('::')>=0) { 		// If absolute
				resolvedLocation += '/app/Resources/views';

				var base = location.split('::');
				var tree = base[1].split(':');

				for (var i = 0; i < tree.length; i++){
					if (i-1 < tree.length)
						resolvedLocation += '/';

					resolvedLocation += tree[i];
				}

			} else if (location.indexOf(':')>=0){	// If relative

				var tree = location.split(':');
				var bundle = apps.getBundle(tree[0])
				var bundlePath = bundle.getDirSrc()

				resolvedLocation += '/'+bundlePath+'/Resources/views/';

				for(var i = 1; i < tree.length; i++){
					resolvedLocation += tree[i];

					if (i + 1 < tree.length && tree[i] !== '')
						resolvedLocation+='/';
				}
			} else {
				throw new Error('Template path error : '+location);
			}

			return path_helper.normalize(resolvedLocation);
		}

		// If it is a normal path (/ or \)
		return path_helper.normalize(location);
	}
};